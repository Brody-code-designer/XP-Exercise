/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useState} from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import {a, useSpring} from "@react-spring/three";

export default function Abe(props) {
  const { nodes, materials, animations } = useGLTF('/abe.glb')
  const { ref, actions, names } = useAnimations(animations)
    const [hovered, setHovered] = useState(false)
    const [index, setIndex] = useState(1)
    const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? "hotpink" : "aquamarine" })
    useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
    // Change animation when the index changes
    useEffect(() => {
        // Reset and fade in animation after an index has been changed
        actions[names[index]].reset().fadeIn(0.5).play()
        // In the clean-up phase, fade it out
        return () => actions[names[index]].fadeOut(0.5)
    }, [index, actions, names])
  return (
    <group ref={ref} {...props} dispose={null}>
      <group
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => setIndex((index + 1) % names.length)}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh castShadow scale={[100, 100, 100]} geometry={nodes.Ch39.geometry} material={materials.Ch39_Body} skeleton={nodes.Ch39.skeleton} />
      </group>
        {/*<a.mesh receiveShadow position={[0, 1, -1]} scale={scale}>*/}
        {/*    <circleBufferGeometry args={[1, 64]} />*/}
        {/*    <a.meshStandardMaterial color={color} />*/}
        {/*</a.mesh>*/}
    </group>
  )
}

useGLTF.preload('/abe.glb')
